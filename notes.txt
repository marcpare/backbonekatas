2013-11-01

(8:40 AM - 9:30)

- got paginate to render
- shows active page

Next up: render list items based on current page
Review: paginate impl in backbone Cellar

Study plain Javascript? (TODOMVC vanilla?)
FunctionalJS?
Javascript design patterns?

Key to studying is learning from others. Studying good code, trying to find things that you don't know that you don't know. (and not looking for solutions to copy+paste)

- Study the BackboneJS source, line by line?
- Study the call path through the BackboneJS source line by line?
- How is Thorax implemented?
- How is StickIt implemented?
- What problems do you use them for?
- How are they tested?

2013-10-31

(8:40 AM)

- On page load, why isn't app.appView defined in the route?
- To get around this, you set a global conditions, like `filter` that is read by the render event of the view that you want to affect.
- (but why doesn't it trigger?)

Review: how to render a list of items without deleting the contents and doing it again?

- Haha, the example does it exactly the same way as new. Instantiating a new view for each item on a re-render


2013-10-30

(6:45 PM)

- Bug in getting a test wine to show: used 'el: 'li'' instead of 'tagName: 'li''

Review: click through each of the BackboneJS examples and see if there are blog posts about the apps.

Review: break down features of Backbone apps in the wild. What is Backbone especially good for?

***

2013-10-29
(8:20 AM)

Backbone has a default API structure, if you conform to it, you don't have to configure anything.

Review: what does the code to implement this look like in backbonejs?

Asked about this line:
"The Backbone documentation recommends inserting all models when the page is generated on the server side, rather than fetching them from the client side once the page is loaded. Since this chapter is trying to give you a more complete picture of how to communicate with a server, we will go ahead and ignore that recommendation."

Found it:

<pre>
Loading Bootstrapped Models 
When your app first loads, it's common to have a set of initial models that you know you're going to need, in order to render the page. Instead of firing an extra AJAX request to fetch them, a nicer pattern is to have their data already bootstrapped into the page. You can then use reset to populate your collections with the initial data. At DocumentCloud, in the ERB template for the workspace, we do something along these lines:

<script>
  var accounts = new Backbone.Collection;
  accounts.reset(<%= @accounts.to_json %>);
  var projects = new Backbone.Collection;
  projects.reset(<%= @projects.to_json(:collaborators => true) %>);
</script>
You have to escape </ within the JSON string, to prevent javascript injection attacks.
</pre>

Finished REST backed Backbone example app.
Didn't really get exposed to all that much code, most of the time was yak-shaving the server, or dealing with data serialization/deserialization.

(7:40PM)

Backbone Koans
https://github.com/larrymyers/backbone-koans

To serve a folder contents:

`python -m SimpleHTTPServer`

Done at 8:17PM with all tests passing. No cheating needed.

Many of these were easy to deduce from the hints around them without really understanding what was going on.

The cool part of this was seeing the testing harness. May incorporate jasmine tests into my backbone projects.

Next Options

- Read backbone source
- BackboneJS Wine Cellar
-- try to do it myself, don't worry about the chrome

- BackboneJS Mobile Flickr Search
-- try to do it myself, don't worry about the chrome

- BackboneJS Employee Directory (with TopCoat and PhoneGap)
-- try to do it myself, don't worry about the chrome
-- Deploy one of these embedded iPhone views on smallredtile

- Thorax and Walmart Labs for TODOMVC
- Duplicate StackOverflow Careers page
- Study Soundcloud Mobile App
- Study Walmart Mobile App
- NYTimes Stickit
- Backbone Graphene

***

2013-10-28
(8:10 AM)

Ctrl+D : Delete character
Ctrl+K : Delete to end of line
Ctrl+V : End of document
Ctrl+W : Selects word
Ctrl+O : Starts new line
Ctrl+T : Transpose

The BookLibrary project is a nice followup to TodoMVC because it uses the same module pattern to organize the files, things are very familiar.

Up to: Creating the back-end

(7:40 PM)

I ended up spending most of the time yak-shaving.
MongoDB doesn't install cleaning with `brew` on Mavericks.
Ended up porting to microdb in about 10 minutes (vs at least 30 minutes and counting to install MongoDB)
https://npmjs.org/package/nodejs-microdb

Modify microdb to make the key incremental?
Or based on a hash of the title?
Or added by hand?

done.

Next Up: Talking to the server

***

2013-10-27

(9:15 AM)

What do you do with the global variable (filter completed) that must trigger an update with a local variable (completed)?

You trigger an event on the model (`visible`). The view listens for it.

Review: each step of the filtering

Instead of calling functions, TodoMVC will trigger events.

Review: how to get the route being called on refresh of page?
A: The filterAll event doesn't get triggered on page reload. The visibility of the todo needs to be computed in the `render` of the view.

(8:00 PM)

Uses a clearfix: 

<pre>
#addBook div:after { content: ""; display: block; height: 0; visibility: hidden; clear: both; font-size: 0; line-height: 0; }
</pre>



***

2013-10-26

Review: is selecting the edit box on the close edit event the right way to do it? (or should it be in the initialize event?)

Review: should I listen to 'all' events in todo-view model changes?
A: yes.

Chrome Inspector doesn't necessarily play nice with `render`. It made it look like additional items were being added to the DOM each time that I refreshed the view. In fact, they weren't.

Need to call `Backbone.history.start();` to get the routing started. From the docs:

When all of your Routers have been created, and all of the routes are set up properly, call `Backbone.history.start()` to begin monitoring `hashchange` events, and dispatching routes.


***

2013-10-25

Code review, compare to existing TodoMVC implementation 

- Use ternary operator for checked
- Cache template as object property
- Replace multiple listens to rerender with 'all' listener
- Get the checked state of a checkbox with `this.allCheckbox.checked`
- The jquery id selected returns a collections, not the element
- Using `where` on a Model doesn't make sense because properties are in `attributes`
- Use `toggleClass` with a Boolean param (instead of trying to keep track of toggled on/toggled off)
- Remove a view by listening to the model's destroy event rather than manually removing it when you destroy it

Review: is there a cleaner way to open and close the edit box?

Shortcut for selecting a child element with jquery:
`this.$input = this.$('.edit');`

2013-10-24

Discovered: use Dash app for documentation.
I ended up reading lots more of the Underscore and Backbone
docs this way. Very quick and easy to explore different functions
in the library this way.

When modifying attributes in a Model use get/set, don't do
it directly (because they're stored in the `attributes`
property)

Review: I've implemented the `completed` toggling
in a kind of ugly way. Is there a way to just integrate it
into the template?

Review: setting the order parameter. I put it in the collection,
listed to the add event on the collection.

Review: how to trigger a render of app-view on page load?

***

2013-10-23

It's possible to iterate through a collection in a template,
but the TODO MVC example does not. It appends as you add elements.

Setting `id: todo-app` instead of `el: #todo-app` broke the event
binding.

This is a consequence of _ensureElement

// If `this.el` is a string, pass it through `$()`, take the first
// matching element, and re-assign it to `el`. Otherwise, create
// an element from the `id`, `className` and `tagName` properties.

Setting `this.el` looks up the element, anything else *creates*
a new one.

Initialize a hash `options || (options = {})`

- Added a todo on form input. Feel like magic, no DOM manipulation
- Added class toggling for completed items
- Delete a todo
- Store in local storage

I was using `sync` instead of `fetch`.


***

2013-10-22

What triggers the render event?

I was reading some Haskell yesterday, and it seemed straightforward. Is "learning programming languages" a mental mode?

Why does clearCompleted return false?


Compare these two forms of the same thing.
The mental model is: use functional constructs to contain the pattern
of invocation (like "call an objects method for each item in a list" = invoke)
Instead of reimplementing it.
(wow, that is kind of opaque with words, but I can see the shape in my head easily)
<pre>
app.todos.each(function(todo){
  if(todo.get('completed')){
   todo.destroy();
  }
});

_.invoke(app.todos.completed(), 'destroy');`
</pre>


why is adding the context necessary? could I delete it?
`app.todos.each(this.filterOne, this);`

I deleted it and the filtering worked fine.
`app.todos.each(this.filterOne);`

Opened an issue about it. What will happen?

> It does because filterOne is not actually relying on the binding of this to the current object. If, however, at some point in the future the code would change and would add a dependency on this, it would break. I think keeping the context parameter around there is good style.

An interesting stylistic consequence of prototypal inheritance.

evening
-------

Do it from scratch, only using the docs.

- Able to make a Todo model
- Give it a view, render a template for the view
- But got stuck trying to render a collection (got unstuck peeking at app-view.js) 

A mistake I've made twice:

- when constructing a View or Model, specify the properties as a dict (not args)

A zen of "no look": you really want to have "the answer". There seem to be too
many things to get right. Take it one line at a time. There is no answer, there
are infinitely many answers (and, what you would really like, a better answer than
the one you've got in hand)

***

2013-10-21

Now I'm building it up one feature at a time, trying to add only the code that supports that feature.

First: the adding a TODO
Then,
* editing a todo
  - did an edit, doesn't show till page refresh
* delete a todo
* check off a todo
* mark all as complete
  
  
Why do you have some of the events as object-level (prototype-level?) properties,
then, some added later in initialize?

What events go where?

The source says `listenTo` is an inversion of control of `on`. Does that mean
that listenTo is for when you want another object's events?

  events: {
    'dblclick label': 'edit',
    'blur .edit': 'close',
    'keypress .edit': 'updateOnEnter'
  },
  initialize: function(){
    this.listenTo(this.model, 'change', this.render);
  }

***

Initialize a property as an empty dictionary:

`var listeningTo = this._listeningTo || (this._listeningTo = {});`

Works with any default value:

`var id = obj._listenId || (obj._listenId = _.uniqueId('l'));`

***

an idiomatic loop for traversing an array:
(the `length` call is slow, and it would be called each iteration
if it were part of the loop boundary statement)

var i, l;
for (i = 0, l = names.length; i < l; i++) {
}

***

I tossed in a little variation here:

<pre>
app.todos.each(function(todo){
  todo.save({'completed':completed});
});
</pre>

<pre>
app.todos.each(function(todo){
  todo.set('completed', completed);
  todo.save();
});
</pre>

***

I did the exercise this way: read the code. Flip to my editor, try to type from memory.
Try to come up with a mental model of the methods so that you can recreate yourself.



2013-10-20

TODO:
-----

/* uses apply because completed() returns a list which we want to expand */
`return this.without.apply(this, this.completed());`


Run JSLint
Is there a JSLint workflow?
What do Grunt tasks for backbone look like?
Would this be faster in coffeescript?

Can I type multiple lines of code with resorting to the arrow keys?

What is the purpose of 
`var app = app || {};`
at the start of each of the files?



// A difficult-to-believe, but optimized internal dispatch function for
// triggering events. Tries to keep the usual cases speedy (most internal
// Backbone events have 3 arguments).
var triggerEvents = function(events, args) {
  var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
  
  switch (args.length) {
    case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
    case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
    case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
    case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
    default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);
  }
};

I think it's because call is faster than apply?

http://jsperf.com/test-call-vs-apply/34