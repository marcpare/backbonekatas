
Next up:
(filtering to completed)
(stats box)

2013-10-21

Now I'm building it up one feature at a time, trying to add only the code that supports that feature.

First: the adding a TODO
Then,
* editing a todo
  - did an edit, doesn't show till page refresh
* delete a todo
* check off a todo
* mark all as complete
  
  
Why do you have some of the events as object-level (prototype-level?) properties,
then, some added later in initialize?

What events go where?

The source says `listenTo` is an inversion of control of `on`. Does that mean
that listenTo is for when you want another object's events?

  events: {
    'dblclick label': 'edit',
    'blur .edit': 'close',
    'keypress .edit': 'updateOnEnter'
  },
  initialize: function(){
    this.listenTo(this.model, 'change', this.render);
  }

***

Initialize a property as an empty dictionary:

`var listeningTo = this._listeningTo || (this._listeningTo = {});`

Works with any default value:

`var id = obj._listenId || (obj._listenId = _.uniqueId('l'));`

***

an idiomatic loop for traversing an array:
(the `length` call is slow, and it would be called each iteration
if it were part of the loop boundary statement)

var i, l;
for (i = 0, l = names.length; i < l; i++) {
}

***

I tossed in a little variation here:

<pre>
app.todos.each(function(todo){
  todo.save({'completed':completed});
});
</pre>

<pre>
app.todos.each(function(todo){
  todo.set('completed', completed);
  todo.save();
});
</pre>

***

I did the exercise this way: read the code. Flip to my editor, try to type from memory.
Try to come up with a mental model of the methods so that you can recreate yourself.



2013-10-20

TODO:
-----

Run JSLint
Is there a JSLint workflow?
What do Grunt tasks for backbone look like?
Would this be faster in coffeescript?

Can I type multiple lines of code with resorting to the arrow keys?

What is the purpose of 
`var app = app || {};`
at the start of each of the files?



// A difficult-to-believe, but optimized internal dispatch function for
// triggering events. Tries to keep the usual cases speedy (most internal
// Backbone events have 3 arguments).
var triggerEvents = function(events, args) {
  var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
  
  switch (args.length) {
    case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
    case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
    case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
    case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
    default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);
  }
};

I think it's because call is faster than apply?

http://jsperf.com/test-call-vs-apply/34